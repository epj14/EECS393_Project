package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

import org.jsoup.Jsoup;

/**
 * a class that is used to write a user defined template to a template file
 */
public class TemplateWriter {
	
	// the filename of the template file
	private String templateFilename;
	// the content that will be added to the template file
	private ArrayList<String> contentList;
	
	/**
	 * constructor for TemplateWriter
	 * @param templateFilename the filename of the template file
	 */
	public TemplateWriter(String templateFilename) {
		this.templateFilename = templateFilename;
		this.contentList = new ArrayList<String>();
	}
	
	/**
	 * gets the template filename
	 * @return the template filename
	 */
	public String getTemplateFilename() {
		return templateFilename;
	}
	
	/**
	 * sets the template filename
	 * @param templateFilename the template filename to set
	 */
	public void setTemplateFilename(String templateFilename) {
		this.templateFilename = templateFilename;
	}
	
	/**
	 * gets the content that will be added to the template file
	 * @return the content that will be added to the template file
	 */
	public ArrayList<String> getContentList() {
		return contentList;
	}
	
	/**
	 * generates the template file that the content stored by contentList will be written 
	 * into
	 * @param templateFilename the filename of the template file
	 * @return the File that was generated
	 */
	private static File generateTemplateFile(String templateFilename) {
		return new File(templateFilename);
	}
	
	/**
	 * generates the HTML for the template using the given heading 
	 * @param heading the heading that will be used to generate HTML for the template
	 * @return the HTML that was generated for the template using heading, or null if 
	 * heading was null or the empty string
	 */
	private String generateHTML(String heading) {
		if (heading == null || heading.length() == 0) {
			return null;
		} else {
			StringBuilder sb = new StringBuilder();
			sb.append("<>" + heading + "<>");
			sb.append("<p></p>");
			return sb.toString();
		}
	}
	
	/**
	 * appends the HTML for the template using the given heading to contentList
	 * @param heading the heading that will be used to generate HTML for the template 
	 * that will be added to contentList
	 * @throws NonuniqueHeadingException if contentList already contains HTML that was 
	 * generated by heading
	 */
	public void appendTemplateContent(String heading) throws NonuniqueHeadingException {
		String content = generateHTML(heading);
		if (contentList.contains(content)) {
			throw new NonuniqueHeadingException("heading " + heading + "already used, "
					+ "template headings must be unique");
		}
		if (content != null) {
			contentList.add(content);
		}
	}
	
	/**
	 * writes the content stored by contentList into the template file and parses the 
	 * resulting template file to ensure that it is valid HTML, any existing content in 
	 * the template file will be overwritten, contentList is not altered
	 * @throws IOException if an I/O error occurs
	 */
	public void writeTemplateContent() throws IOException {
		File templateFile = generateTemplateFile(templateFilename);
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(templateFile, false), "UTF-8"));
		for (String s : contentList) {
			bw.write(s);
		}
		bw.close();
		Jsoup.parse(templateFile, "UTF-8");
	}

}
